f $s0 // g $s1 // h $s2 // i $s3 // j $s4 // A[] $s6 // B[] $s7
1.
  a.  add $s0, $s1, $s2     // $s0 = $s1 + $s2 // f = g + h
      add $s0, $s3, $s0     // $s0 += $s3      // j = i + j

  b.   sll  $t0, $s0, 2     //  $t0 = $s0 << 2     // $t0 = 4*f
       add  $t0, $s6, $t0   //  $t0 = $s6 + $t0    // $t0 = &A[f]
       lw   $t1, 0($t0)     //  $t1 = Mem[$t0 + 0] // $t1 = A[f]
       lw   $t2, 4($t0)     //  $t2 = Mem[$t0 + 4] // $t2 = A[f+1]
       add  $t0, $t1, $t2   //  $t0 = $t1 + $t2    // $t0 = A[f]+A[f+1]
       sll  $t1, $s1, 2     //  $t1 = $s1 >> 2     // $t1 = 4*g
       add  $t1, $s7, $t1   //  $t1 = $s7 + $t1    // $t1 = &B[g]
       sw   $t0, 0($t1)     //  Mem[$t1 + 0] = $t0 // B[g] = A[f]+A[f+1]

  c.    li   $t2, 100       //  $t2 = 100
        move $t1, $s6       //  $t1 = &A[0]
        li   $s3, 0         //  i = 0
  loop: lw   $t0, 0($t1)    //  $t0 = A[i]              for(i = 0; i < 100; i++)
        add  $s0, $s0, $t0  //  f = f + A[i]
        addi $t1, $t1, 4    //  $t1 = $t1 + 4
        addi $s3, $s3, 1    //  i = i + 1
        blt  $s3, $t2, loop //  if( i < 100 ) goto loop
2.


  a.   h = A[0] << 4;
       $s2 = $s6

  b.   B[8] = A[i − j];


  c.  B[8] = A[i] + A[j];


  d.  f = A[B[g] + 1];


------------------------------------------------------------------------------------------
Memória cache

1)

a)    0x0000222c                                              tag 0       tag 8
      0000 0000 0000 0000 0010     0010 0010 11    00         index 136   index 139
      |_________________________|   |____________|
                tag = 2              index = 149      0
b)    0x00001956
        0000 0000 0000 0000 0001    1001 0101 01     10
                tag = 2              index = 597      2
c)    0x00004321
        0000 0000 0000 0000 0010    0011 0010 00     01
                tag = 2             index = 200       1
d)    0x00000037
        0000 0000 0000 0000 0000    0000 0011 01     11
                tag = 0               index = 7       3
2)
tipo   direct mapped        direct mapped      associativa

linhas     1024                 256                256

nº bytes     4                  16                16(4*4)

cap.total   1024*4            256*16              256*16

num cache(/) 2^16/4=2^14   2^14 /16 = 2^10      2^14 /16 = 2^10

linhas mapp 2^14/2^10=16   2^14/(256*16)=4     2^14/(256*4)=16

4)
12, 720, 172, 8, 764, 352, 760, 56, 724, 176, 744, 1012
3   180  43   2  191   88  190  14  181   44  186   253

          c1          c2          c3
indice    3           2           1

tag       27          27          27

offset    0           1           2



enderceço    c1          c2          c3
12  |   3    3/miss      1/miss      0/miss  011
720 | 180    4/miss      2/miss      1/miss  100
172 |  43    7/miss      3/miss      1/miss  111
8   |   2    2/miss      1/hit       0/hit   010
764 | 191
352 |  88
760 | 190
56  |  14
724 | 181
176 |  44
744 | 186
1012| 253
